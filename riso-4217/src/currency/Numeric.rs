use std::fmt;

//use serde::{Serialize, Deserialize};
//#[derive(Serialize, Deserialize)]

#[derive(Debug, Eq, PartialEq)]
pub enum Numeric {
    None,
    // ENUM START
    N008,
    N012,
    N032,
    N036,
    N044,
    N048,
    N050,
    N051,
    N052,
    N060,
    N064,
    N068,
    N072,
    N084,
    N090,
    N096,
    N104,
    N108,
    N116,
    N124,
    N132,
    N136,
    N144,
    N152,
    N156,
    N170,
    N174,
    N188,
    N191,
    N192,
    N203,
    N208,
    N214,
    N222,
    N230,
    N232,
    N238,
    N242,
    N262,
    N270,
    N292,
    N320,
    N324,
    N328,
    N332,
    N340,
    N344,
    N348,
    N352,
    N356,
    N360,
    N364,
    N368,
    N376,
    N388,
    N392,
    N398,
    N400,
    N404,
    N408,
    N410,
    N414,
    N417,
    N418,
    N422,
    N426,
    N430,
    N434,
    N446,
    N454,
    N458,
    N462,
    N480,
    N484,
    N496,
    N498,
    N504,
    N512,
    N516,
    N524,
    N532,
    N533,
    N548,
    N554,
    N558,
    N566,
    N578,
    N586,
    N590,
    N598,
    N600,
    N604,
    N608,
    N634,
    N643,
    N646,
    N654,
    N682,
    N690,
    N694,
    N702,
    N704,
    N706,
    N710,
    N728,
    N748,
    N752,
    N756,
    N760,
    N764,
    N776,
    N780,
    N784,
    N788,
    N800,
    N807,
    N818,
    N826,
    N834,
    N840,
    N858,
    N860,
    N882,
    N886,
    N901,
    N927,
    N928,
    N929,
    N930,
    N931,
    N932,
    N933,
    N934,
    N936,
    N938,
    N940,
    N941,
    N943,
    N944,
    N946,
    N947,
    N948,
    N949,
    N950,
    N951,
    N952,
    N953,
    N955,
    N956,
    N957,
    N958,
    N959,
    N960,
    N961,
    N962,
    N963,
    N964,
    N965,
    N967,
    N968,
    N969,
    N970,
    N971,
    N972,
    N973,
    N975,
    N976,
    N977,
    N978,
    N979,
    N980,
    N981,
    N984,
    N985,
    N986,
    N990,
    N994,
    N997,
    N999,
    // ENUM END
}

impl fmt::Display for Numeric {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let numeric = format!("{:?}", self);
        write!(f, "{}", &numeric[1..])
    }
}

impl Numeric {
    pub fn is_none(&self) -> bool {
        matches!(*self, Numeric::None)
    }
}
